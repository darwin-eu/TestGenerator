[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cesar Barboza. Maintainer, author. Ger Inberg. Author. Adam Black. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barboza C, Inberg G, Black (2024). TestGenerator: Integration Unit Tests Pharmacoepidemiological Studies. R package version 0.3.1, https://darwin-eu.github.io/TestGenerator/, https://github.com/darwin-eu/TestGenerator.","code":"@Manual{,   title = {TestGenerator: Integration Unit Tests for Pharmacoepidemiological Studies},   author = {Cesar Barboza and Ger Inberg and Adam Black},   year = {2024},   note = {R package version 0.3.1, https://darwin-eu.github.io/TestGenerator/},   url = {https://github.com/darwin-eu/TestGenerator}, }"},{"path":"/index.html","id":"testgenerator","dir":"","previous_headings":"","what":"Integration Unit Tests for Pharmacoepidemiological Studies","title":"Integration Unit Tests for Pharmacoepidemiological Studies","text":"cohort picked correct number patients? calculating intersection right way? expected value treatment duration? just takes one incorrect parameter get incoherent results pharmacoepidemiological study, challenging test calculations huge complex databases. TestGenerator useful push small sample patients unit test study OMOP-CDM. includes tools create blank CDM complete vocabulary check code expect specific cases. package based unit testing written Eramus MC Ranitidine Study.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Integration Unit Tests for Pharmacoepidemiological Studies","text":"install TestGenerator:","code":"# CRAN version  install.packages(\"TestGenerator\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Integration Unit Tests for Pharmacoepidemiological Studies","text":"user can provide Excel file (link sample) set CSV files represent tables OMOP-CDM, micro population just 8 patients testing purposes. readPatients() read either Excel CSVs, saves data JSON file. useful user wants create one Unit Test Definitions. parameter outputPath NULL files saved testthat/testCases folder package. Alterna Alternatively, user can use functions readPatients.xl readPatients.csv directly. patientCDM() pushes one Unit Test Definitions blank CDM reference complete version vocabulary. pathJSON parameter NULL, TestGenerator look JSON test files testthat/testCases folder. Now user CDM reference complete vocabulary just 8 patients. reference can used create cohort create unit tests. graphCohort() possible visualise timeline particular patient.","code":"TestGenerator::readPatients(filePath = \"~/pathto/testPatients.xlsx\",                             testName = \"test\",                             outputPath = NULL,                             cdmVersion = \"5.3\") TestGenerator::readPatients.xl(filePath = \"~/pathto/testPatients.xlsx\",                                testName = \"test\",                                outputPath = NULL,                                cdmVersion = \"5.3\")  TestGenerator::readPatients.csv(filePath = \"~/pathto/csv/files\",                                 testName = \"test\",                                 outputPath = NULL,                                 cdmVersion = \"5.3\",                                 reduceLargeIds = FALSE) cdm <- TestGenerator::patientsCDM(pathJson = NULL,                                    testName = \"test\",                                   cdmVersion = \"5.3\") filePath <- system.file(\"extdata/icu_sample_population.xlsx\",                          package = \"TestGenerator\")  outputPath <- file.path(tempdir(), \"test\")  dir.create(outputPath)  TestGenerator::readPatients(filePath = filePath,                              testName = \"test\",                              outputPath = outputPath,                              cdmVersion = \"5.3\") #> ✔ Unit Test Definition Created Successfully: 'test' cdm <- TestGenerator::patientsCDM(pathJson = outputPath,                                    testName = \"test\",                                   cdmVersion = \"5.3\") #> ! cdm name not specified and could not be inferred from the cdm source table #> ✔ Patients pushed to blank CDM successfully cdm$person #> # Source:   table<main.person> [8 x 18] #> # Database: DuckDB v0.9.1 [cbarboza@Windows 10 x64:R 4.3.1/C:\\Users\\cbarboza\\AppData\\Local\\Temp\\Rtmpw5D71N\\file687037ca5b99.duckdb] #>   person_id gender_concept_id year_of_birth month_of_birth day_of_birth #>       <int>             <int>         <int>          <int>        <int> #> 1         1              8532          1980             NA           NA #> 2         2              8507          1990             NA           NA #> 3         3              8532          2000             NA           NA #> 4         4              8507          1980             NA           NA #> 5         5              8532          1990             NA           NA #> 6         6              8507          2000             NA           NA #> 7         7              8532          1980             NA           NA #> 8         8              8507          1990             NA           NA #> # ℹ 13 more variables: birth_datetime <dttm>, race_concept_id <int>, #> #   ethnicity_concept_id <int>, location_id <int>, provider_id <int>, #> #   care_site_id <int>, person_source_value <chr>, gender_source_value <chr>, #> #   gender_source_concept_id <int>, race_source_value <chr>, #> #   race_source_concept_id <int>, ethnicity_source_value <chr>, #> #   ethnicity_source_concept_id <int> test_cohorts <- system.file(\"extdata\",                             \"test_cohorts\",                             package = \"TestGenerator\")  cohort_set <- CDMConnector::readCohortSet(test_cohorts)    cdm <- CDMConnector::generate_cohort_set(cdm,                                          cohort_set,                                          name = \"test_cohorts\") #> ℹ Generating 3 cohorts #> ℹ Generating cohort (1/3) - diazepam✔ Generating cohort (1/3) - diazepam [568ms] #> ℹ Generating cohort (2/3) - hospitalisation✔ Generating cohort (2/3) - hospitalisation [577ms] #> ℹ Generating cohort (3/3) - icu_visit✔ Generating cohort (3/3) - icu_visit [239ms] cohortAttrition <- CDMConnector::attrition(cdm[[\"test_cohorts\"]])    excluded_records <- cohortAttrition %>%      pull(excluded_records) %>%      sum()    expect_equal(excluded_records, 0) diazepam <- cdm[[\"test_cohorts\"]] %>%    filter(cohort_definition_id == 1) %>%    collect()  hospitalisation <- cdm[[\"test_cohorts\"]] %>%    filter(cohort_definition_id == 2) %>%    collect()  icu_visit <- cdm[[\"test_cohorts\"]] %>%    filter(cohort_definition_id == 3) %>%    collect()  TestGenerator::graphCohort(subject_id = 4, list(\"diazepam\" = diazepam,                                                 \"hospitalisation\" = hospitalisation,                                                 \"icu_visit\" = icu_visit)) #> Warning in geom_segment(aes(x = cohort_start_date, y = cohort, xend = #> cohort_end_date, : Ignoring unknown aesthetics: fill"},{"path":"/reference/downloadTestData.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Test Data Files — downloadTestData","title":"Download Test Data Files — downloadTestData","text":"Download Test Data Files","code":""},{"path":"/reference/downloadTestData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Test Data Files — downloadTestData","text":"","code":"downloadTestData(   datasetName = \"mimicIV\",   cdmVersion = \"5.3\",   pathToData = Sys.getenv(\"STUDY_DATASETS\"),   overwrite = FALSE )"},{"path":"/reference/downloadTestData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Test Data Files — downloadTestData","text":"datasetName data set name found https://github.com/darwin-eu/EunomiaDatasets. data set name corresponds folder data set ZIP files cdmVersion OMOP CDM version. version appear suffix data file, example: synpuf_5.3.zip. Default: '5.3' pathToData path Eunomia data stored file system., default value environment variable \"EUNOMIA_DATA_FOLDER\" used. overwrite Control whether existing archive file overwritten already exist.","code":""},{"path":"/reference/downloadTestData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Test Data Files — downloadTestData","text":"Invisibly returns destination download successful.","code":""},{"path":"/reference/downloadTestData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Test Data Files — downloadTestData","text":"","code":"if (FALSE) { downloadTestData() }"},{"path":"/reference/graphCohort.html","id":null,"dir":"Reference","previous_headings":"","what":"`graphCohort()` aids in the visualisation of cohorts timelines, useful to get a grip on intersections. — graphCohort","title":"`graphCohort()` aids in the visualisation of cohorts timelines, useful to get a grip on intersections. — graphCohort","text":"`graphCohort()` aids visualisation cohorts timelines, useful get grip intersections.","code":""},{"path":"/reference/graphCohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"`graphCohort()` aids in the visualisation of cohorts timelines, useful to get a grip on intersections. — graphCohort","text":"","code":"graphCohort(subject_id, cohorts = list())"},{"path":"/reference/graphCohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"`graphCohort()` aids in the visualisation of cohorts timelines, useful to get a grip on intersections. — graphCohort","text":"subject_id one subject id per visualisation cohorts List cohorts","code":""},{"path":"/reference/graphCohort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"`graphCohort()` aids in the visualisation of cohorts timelines, useful to get a grip on intersections. — graphCohort","text":"ggplot graph","code":""},{"path":"/reference/graphCohort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"`graphCohort()` aids in the visualisation of cohorts timelines, useful to get a grip on intersections. — graphCohort","text":"","code":"hosptalised <- tibble::tibble(cohort_definition_id = 2,                               subject_id = 1,                               cohort_start_date = \"2018-01-01\",                               cohort_end_date = \"2018-01-10\")  icu_patients <- tibble::tibble(cohort_definition_id = 5,                               subject_id = 1,                               cohort_start_date = \"2018-01-02\",                               cohort_end_date = \"2018-01-04\")  drugs_treatment <- tibble::tibble(cohort_definition_id = 5,                                   subject_id = 1,                               cohort_start_date = \"2018-01-07\",                               cohort_end_date = \"2018-01-09\")  TestGenerator::graphCohort(subject_id = 1, cohorts = list(\"hosptalised\" = hosptalised,                                                       \"icu_patients\" = icu_patients,                                                       \"drugs_treatment\" = drugs_treatment)) #> Warning: Ignoring unknown aesthetics: fill"},{"path":"/reference/patientsCDM.html","id":null,"dir":"Reference","previous_headings":"","what":"Pushes test population into a blank CDM. — patientsCDM","title":"Pushes test population into a blank CDM. — patientsCDM","text":"Pushes test population blank CDM.","code":""},{"path":"/reference/patientsCDM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pushes test population into a blank CDM. — patientsCDM","text":"","code":"patientsCDM(pathJson = NULL, testName = NULL, cdmVersion = \"5.3\")"},{"path":"/reference/patientsCDM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pushes test population into a blank CDM. — patientsCDM","text":"pathJson Directory sample populations json located. NULL, gets default inst/testCases directory. testName Name sample population JSON file. NULL push first sample population testCases directory. cdmVersion cdm version, default \"5.3\".","code":""},{"path":"/reference/patientsCDM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pushes test population into a blank CDM. — patientsCDM","text":"CDM reference object sample population.","code":""},{"path":"/reference/patientsCDM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pushes test population into a blank CDM. — patientsCDM","text":"","code":"# \\donttest{ filePath <- system.file(\"extdata\", \"testPatientsRSV.xlsx\", package = \"TestGenerator\") TestGenerator::readPatients(filePath = filePath, outputPath = tempdir()) #> ✔ Unit Test Definition Created Successfully: 'test' cdm <- TestGenerator::patientsCDM(pathJson = tempdir(), testName = \"test\") #>  #> Download completed! #> Creating CDM database /tmp/RtmpT4YaGd/empty_cdm_5.3.zip #> ■■■■■■■■■■■■■■■■■■■■■■            70% | ETA:  2s #> ■■■■■■■■■■■■■■■■■■■■■■■■■■■■      89% | ETA:  2s #> ! cdm name not specified and could not be inferred from the cdm source table #> ✔ Patients pushed to blank CDM successfully duckdb::duckdb_shutdown(duckdb::duckdb()) # }"},{"path":"/reference/readPatients.csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a sample of patients in CSV format into a Unit Testing Definition JSON file. — readPatients.csv","title":"Converts a sample of patients in CSV format into a Unit Testing Definition JSON file. — readPatients.csv","text":"Converts sample patients CSV format Unit Testing Definition JSON file.","code":""},{"path":"/reference/readPatients.csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a sample of patients in CSV format into a Unit Testing Definition JSON file. — readPatients.csv","text":"","code":"readPatients.csv(   filePath = NULL,   testName = \"test\",   outputPath = NULL,   cdmVersion = \"5.3\",   reduceLargeIds = FALSE )"},{"path":"/reference/readPatients.csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a sample of patients in CSV format into a Unit Testing Definition JSON file. — readPatients.csv","text":"filePath Path test patient data CSV format. Multiple CSV files representing tables tables OMOP-CDM must provided, e.g. person.csv, drug_exposure.csv, condition_ocurrence.csv, etc. testName Name test population file character. outputPath Path output file, NULL, folder created project folder inst/testCases. cdmVersion cdm version, default \"5.3\". reduceLargeIds Reduces length long ids generally int64 format, found MIMIC-IV database.","code":""},{"path":"/reference/readPatients.csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a sample of patients in CSV format into a Unit Testing Definition JSON file. — readPatients.csv","text":"JSON file sample patients inside project directory.","code":""},{"path":"/reference/readPatients.csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts a sample of patients in CSV format into a Unit Testing Definition JSON file. — readPatients.csv","text":"","code":"filePath <- system.file(\"extdata\", \"mimic_sample\", package = \"TestGenerator\") readPatients.csv(filePath = filePath, outputPath = tempdir()) #> ✔ Unit Test Definition Created Successfully: 'test'"},{"path":"/reference/readPatients.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a sample of patients into Unit Testing Definition JSON file. — readPatients","title":"Converts a sample of patients into Unit Testing Definition JSON file. — readPatients","text":"Converts sample patients Unit Testing Definition JSON file.","code":""},{"path":"/reference/readPatients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a sample of patients into Unit Testing Definition JSON file. — readPatients","text":"","code":"readPatients(   filePath = NULL,   testName = \"test\",   outputPath = NULL,   cdmVersion = \"5.3\" )"},{"path":"/reference/readPatients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a sample of patients into Unit Testing Definition JSON file. — readPatients","text":"filePath Path test patient data Excel format. Excel sheets represent tables OMOP-CDM, e.g. person, drug_exposure, condition_ocurrence, etc. testName name test population character. outputPath Path output file, NULL, folder created project folder inst/testCases. cdmVersion cdm version, default \"5.3\".","code":""},{"path":"/reference/readPatients.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a sample of patients into Unit Testing Definition JSON file. — readPatients","text":"JSON file sample patients inside project directory.","code":""},{"path":"/reference/readPatients.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts a sample of patients into Unit Testing Definition JSON file. — readPatients","text":"","code":"filePath <- system.file(\"extdata\", \"testPatientsRSV.xlsx\", package = \"TestGenerator\") readPatients(filePath = filePath, outputPath = tempdir()) #> ✔ Unit Test Definition Created Successfully: 'test'"},{"path":"/reference/readPatients.xl.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a sample of patients in XLSX format into Unit Testing Definition JSON file. — readPatients.xl","title":"Converts a sample of patients in XLSX format into Unit Testing Definition JSON file. — readPatients.xl","text":"Converts sample patients XLSX format Unit Testing Definition JSON file.","code":""},{"path":"/reference/readPatients.xl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a sample of patients in XLSX format into Unit Testing Definition JSON file. — readPatients.xl","text":"","code":"readPatients.xl(   filePath = NULL,   testName = \"test\",   outputPath = NULL,   cdmVersion = \"5.3\" )"},{"path":"/reference/readPatients.xl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a sample of patients in XLSX format into Unit Testing Definition JSON file. — readPatients.xl","text":"filePath Path test patient data Excel format. Excel sheets represent tables OMOP-CDM, e.g. person, drug_exposure, condition_ocurrence, etc. testName name test population character. outputPath Path write test JSON files. NULL, files written project's testthat folder, .e. tests/testthat/testCases. cdmVersion cdm version, default \"5.3\".","code":""},{"path":"/reference/readPatients.xl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a sample of patients in XLSX format into Unit Testing Definition JSON file. — readPatients.xl","text":"directory test JSON files sample patients inside project directory.","code":""},{"path":"/reference/readPatients.xl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts a sample of patients in XLSX format into Unit Testing Definition JSON file. — readPatients.xl","text":"","code":"filePath <- system.file(\"extdata\", \"testPatientsRSV.xlsx\", package = \"TestGenerator\") readPatients.xl(filePath = filePath, outputPath = tempdir()) #> ✔ Unit Test Definition Created Successfully: 'test'"},{"path":"/news/index.html","id":"testgenerator-031","dir":"Changelog","previous_headings":"","what":"TestGenerator 0.3.1","title":"TestGenerator 0.3.1","text":"readPatients() now parameter select either Excel CSV files input. readPatients.xl() readPatients.csv also exported functions convenience. graphCohort() provides visualisation cohort timelines. JSONS saved testthat/testCases folder default better test self-containment. Fixed bug related empty tables pushed duckdb CDM. Tested MIMIC database.","code":""},{"path":"/news/index.html","id":"testgenerator-025","dir":"Changelog","previous_headings":"","what":"TestGenerator 0.2.5","title":"TestGenerator 0.2.5","text":"CRAN release: 2024-02-01 Using omopgenerics checking Excel data.","code":""},{"path":"/news/index.html","id":"testgenerator-024","dir":"Changelog","previous_headings":"","what":"TestGenerator 0.2.4","title":"TestGenerator 0.2.4","text":"Updated DESCRIPTION.","code":""},{"path":"/news/index.html","id":"testgenerator-023","dir":"Changelog","previous_headings":"","what":"TestGenerator 0.2.3","title":"TestGenerator 0.2.3","text":"Updated examples.","code":""},{"path":"/news/index.html","id":"testgenerator-022","dir":"Changelog","previous_headings":"","what":"TestGenerator 0.2.2","title":"TestGenerator 0.2.2","text":"Updated messages functions.","code":""},{"path":"/news/index.html","id":"testgenerator-021","dir":"Changelog","previous_headings":"","what":"TestGenerator 0.2.1","title":"TestGenerator 0.2.1","text":"Updated documentation vignette explaining sample data.","code":""},{"path":"/news/index.html","id":"testgenerator-020","dir":"Changelog","previous_headings":"","what":"TestGenerator 0.2.0","title":"TestGenerator 0.2.0","text":"Initial CRAN submission.","code":""},{"path":"/news/index.html","id":"testgenerator-010","dir":"Changelog","previous_headings":"","what":"TestGenerator 0.1.0","title":"TestGenerator 0.1.0","text":"Tests passed finishes documentation.","code":""}]
